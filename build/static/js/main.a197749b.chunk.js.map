{"version":3,"sources":["components/Header.js","components/Form.js","components/Meme.js","components/MemeGenerator.js","components/App.js","index.js"],"names":["Header","className","src","alt","Form","props","type","name","value","topText","maxLength","placeholder","onChange","handleChange","bottomText","onClick","handleClick","Meme","normalSize","width","data","height","id","style","img","onLoad","handleLoad","MemeGenerator","state","meme","memez","bind","fetch","then","response","json","setState","memes","catch","error","console","log","this","toggleVisibility","randomIndex","Math","floor","random","length","randomMeme","url","domtoimage","toJpeg","document","getElementById","quality","dataUrl","link","createElement","download","href","click","spinnerVisibility","memeVisibility","visibility","event","preventDefault","target","shuffle","save","React","Component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.a197749b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header() {\n    return(\n        <div>\n            <header className = \"header\">\n                <div className = \"headerContainer\">\n                    <img \n                        className = \"headerImg\"\n                        src = \"https://i.kym-cdn.com/photos/images/original/001/459/556/023.png\" \n                        alt = \"clown pepe\"\n                    />\n\n                    <p className = \"headerTitle\"> Meme Generator </p>\n                </div>\n            </header>\n        </div>\n    );\n}\n\nexport default Header;","import React from \"react\";\nimport \"./Form.css\";\n\nfunction Form(props) {\n    return(\n        <div className = \"userInputForm\">\n            <form>\n                <input \n                    className = \"topTextField\"\n                    type = \"text\"\n                    name = \"topText\"\n                    value = {props.topText}\n                    maxLength = {\"50\"}\n                    placeholder = \"Top text..\"\n                    onChange = {props.handleChange}\n                />\n\n                <input \n                    className = \"bottomTextField\"\n                    type = \"text\"\n                    name = \"bottomText\"\n                    value = {props.bottomText}\n                    maxLength = {\"50\"}\n                    placeholder = \"Bottom text..\"\n                    onChange = {props.handleChange}\n                />\n\n                <button className = \"shuffleButton\" name = \"shuffleButton\" onClick = {props.handleClick}> Shuffle </button>\n\n                <button className = \"saveButton\" name = \"saveButton\" onClick = {props.handleClick}> Save </button>\n            </form>\n        </div>\n    );\n}\n\nexport default Form;","import React from \"react\";\nimport \"./Meme.css\"\n\n\nfunction Meme(props) {\n    const scaleDown = {width: \"50%\", height: \"auto\"};\n    const normalSize = {width: props.data.width, height: props.data.height};\n    return(\n        <div id = \"memeWrapper\">\n            <img\n                style = {props.data.width > 500 ? scaleDown : normalSize}\n                alt = \"Dank Meme\"\n                src = {props.data.img}\n                onLoad = {() => props.handleLoad(\"hidden\", \"visible\")}\n            />\n\n            <h2 className = \"memeTopText\"> {props.topText} </h2>\n\n            <h2 className = \"memeBottomText\"> {props.bottomText} </h2>\n        </div>\n    );\n}\n\nexport default Meme;","import React from \"react\";\nimport domtoimage from 'dom-to-image';\n\nimport Form from \"./Form\";\nimport Meme from \"./Meme\";\nimport \"./MemeGenerator.css\";\n\n\nclass MemeGenerator extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            meme: {\n                name: \"Joker and Mini Joker\",\n                img: \"https://i.imgur.com/XTNyiVw.png\",\n                width: 1200,\n                height: 600\n            },\n            memez: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);  \n        this.handleLoad = this.handleLoad.bind(this); \n    }\n\n    componentDidMount() {\n        fetch(\"https://api.imgflip.com/get_memes\")\n        .then(response => response.json())\n        .then(data => {\n            this.setState({\n                memez: data.data.memes\n            })\n        })\n        .catch(error => {\n            console.log(\"Error while retrieving data from the server\")\n        })\n    }\n\n    shuffle() {\n        this.toggleVisibility(\"visible\", \"hidden\");\n\n        let randomIndex = Math.floor(Math.random() * this.state.memez.length);\n        let randomMeme = this.state.memez[randomIndex];\n        this.setState({\n            meme: {\n                name: randomMeme.name,\n                img: randomMeme.url,\n                width: randomMeme.width,\n                height: randomMeme.height\n            }\n        });\n    }\n\n    save() {\n        domtoimage.toJpeg(document.getElementById(\"memeWrapper\"), {quality: 1.0})\n        .then(dataUrl => {\n            //Create a hyperlink\n            let link = document.createElement(\"a\");\n            //File name\n            link.download = this.state.meme.name;\n            //Destination\n            link.href = dataUrl;\n            link.click();\n        });\n    }\n\n    toggleVisibility(spinnerVisibility, memeVisibility) {\n        document.getElementById(\"spinner\").style.visibility = spinnerVisibility;\n        document.getElementById(\"memeWrapper\").style.visibility = memeVisibility;\n    }\n\n    handleClick(event) {\n        //To prevent page from automatic refreshing\n        event.preventDefault();\n        const {name} = event.target;\n\n        if(name === \"shuffleButton\") this.shuffle();\n        else if(name === \"saveButton\") this.save();\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleLoad(spinnerVisibility, memeVisibility) {\n        this.toggleVisibility(spinnerVisibility, memeVisibility);\n    }\n\n    render() {\n        return(\n            <div className = \"memeGeneratorBody\">\n                <Form\n                    topText = {this.state.topText}\n                    bottomText = {this.state.bottomText}\n                    handleChange = {this.handleChange}\n                    handleClick = {this.handleClick}\n                />\n                \n                <Meme \n                    data = {this.state.meme}\n                    topText = {this.state.topText}\n                    bottomText = {this.state.bottomText}\n                    handleLoad = {this.handleLoad}\n                />  \n\n                <div id = \"spinner\"></div>       \n            </div>\n        );\n    }\n}\n\n\nexport default MemeGenerator;","import React from \"react\";\nimport Header from \"./Header\";\nimport MemeGenerator from \"./MemeGenerator\";\n\n\nfunction App() {\n    return(\n        <div>\n            <Header />\n            <MemeGenerator />\n        </div>\n    );\n}\n\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}