{"version":3,"sources":["components/Header.js","components/Form.js","components/Meme.js","components/Body.js","components/MemeGenerator.js","index.js"],"names":["Header","className","src","alt","Form","props","type","name","value","topText","maxLength","placeholder","onChange","handleChange","bottomText","onClick","handleClick","Meme","viewPortWidth","window","innerWidth","memeWidth","data","width","scaleDown","normalSize","height","id","style","img","onLoad","handleLoad","Body","MemeGenerator","state","meme","memes","badMemes","bind","fetch","then","response","json","filteredMemes","filterMemes","setState","catch","error","console","log","filter","includes","map","this","toggleVisibility","randomIndex","Math","floor","random","length","randomMeme","url","domtoimage","toJpeg","document","getElementById","quality","dataUrl","link","createElement","download","href","click","spinnerVisibility","memeVisibility","visibility","event","preventDefault","target","shuffle","save","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.668e3722.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header() {\n    return(\n        <header className = \"mgHeader\">\n            <img \n                className = \"headerImg\"\n                src = \"https://i.kym-cdn.com/photos/images/original/001/459/556/023.png\" \n                alt = \"clown pepe\"\n            />\n\n            <p className = \"headerTitle\">Meme Generator</p>\n        </header>\n    );\n}\n\nexport default Header;","import React from \"react\";\nimport \"./Form.css\";\n\nfunction Form(props) {\n    return(\n        <form className = \"userInputForm\">\n            <input \n                className = \"topTextField\"\n                type = \"text\"\n                name = \"topText\"\n                value = {props.topText}\n                maxLength = {\"60\"}\n                placeholder = \"Top text..\"\n                onChange = {props.handleChange}\n            />\n\n            <input \n                className = \"bottomTextField\"\n                type = \"text\"\n                name = \"bottomText\"\n                value = {props.bottomText}\n                maxLength = {\"60\"}\n                placeholder = \"Bottom text..\"\n                onChange = {props.handleChange}\n            />\n\n            <div className = \"userInputForm-Buttons\">\n                <button className = \"shuffleButton\" name = \"shuffleButton\" onClick = {props.handleClick}>Shuffle</button>\n                <button className = \"saveButton\" name = \"saveButton\" onClick = {props.handleClick}>Save</button>\n            </div>\n        </form>\n    );\n}\n\nexport default Form;","import React from \"react\";\nimport \"./Meme.css\"\n\nfunction Meme(props) {\n    let viewPortWidth = window.innerWidth;\n    let memeWidth = props.data.width;\n    let scaleDown = {};\n    let normalSize = {};\n\n    if(viewPortWidth < 500) {\n        scaleDown = {width: \"90%\", height: \"auto\"};\n\n        if(memeWidth > 300)\n            normalSize = {width: \"300px\", height: \"auto\"};\n        else\n            normalSize = {width: props.data.width, height: props.data.height};\n    }\n    else {\n        if(memeWidth > 750) {\n            scaleDown = {width: \"35%\", height: \"auto\"};\n        }\n        else\n            scaleDown = {width: \"70%\", height: \"auto\"};\n\n        normalSize = {width: props.data.width, height: props.data.height};\n    }\n    \n    \n\n    return(\n        <div id = \"memeWrapper\">\n            <img\n                style = {props.data.width > 500 ? scaleDown : normalSize}\n                alt = \"Dank Meme\"\n                src = {props.data.img}\n                onLoad = {() => props.handleLoad(\"hidden\", \"visible\")}\n            />\n\n            <h2 className = \"memeTopText\">{props.topText}</h2>\n\n            <h2 className = \"memeBottomText\">{props.bottomText}</h2>\n        </div>\n    );\n}\n\nexport default Meme;","import React from \"react\";\n\nimport Form from \"./Form\";\nimport Meme from \"./Meme\";\nimport \"./Body.css\";\n\nfunction Body(props) {\n    return(\n        <div className = \"mgBody\">\n            <Form\n                topText = {props.topText}\n                bottomText = {props.bottomText}\n                handleChange = {props.handleChange}\n                handleClick = {props.handleClick}\n            />\n            \n            <Meme \n                data = {props.data}\n                topText = {props.topText}\n                bottomText = {props.bottomText}\n                handleLoad = {props.handleLoad}\n            />  \n\n            <div id = \"spinner\"></div>       \n        </div>\n    );\n}\n\nexport default Body;","import React from \"react\";\nimport domtoimage from \"dom-to-image\";\n\nimport Header from \"./Header\";\nimport Body from \"./Body\";\n\nclass MemeGenerator extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            meme: {\n                name: \"Joker and Peter Parker Dancing\",\n                img: \"https://indianmemetemplates.com/storage/Joker-and-Peter-Parker-Dancing.jpg\",\n                width: 660,\n                height: 374\n            },\n            memes: []\n        };\n\n        this.badMemes = [\n            \"28251713\", \"164335977\", \"112126428\", \"93895088\", \"71428573\", \"123999232\",\n            \"178591752\", \"21735\", \"53764\", \"99683372\", \"28034788\", \"14230520\", \"129242436\",\n            \"101910402\", \"124822590\", \"47235368\", \"161865971\", \"56225174\", \"131087935\", \n            \"21604248\", \"21735\", \"101288\", \"134797956\", \"155518747\", \"1035805\", \"157978092\", \n            \"181913649\", \"87743020\", \"438680\", \"188390779\", \"6235864\", \"61539\"\n        ];\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);  \n        this.handleLoad = this.handleLoad.bind(this); \n    }\n\n    componentDidMount() {\n        fetch(\"https://api.imgflip.com/get_memes\")\n        .then(response => response.json())\n        .then(data => {\n            const filteredMemes = this.filterMemes(data.data.memes);\n\n            this.setState({\n                memes: filteredMemes\n            });\n        })\n        .catch(error => {\n            console.log(\"Error while retrieving data from the server\")\n        })\n    }\n\n    filterMemes(memes) {\n        return memes.filter(meme => !(this.badMemes.includes(meme.id)))\n                    .map(meme => meme);\n    }\n\n    shuffle() {\n        this.toggleVisibility(\"visible\", \"hidden\");\n\n        let randomIndex = Math.floor(Math.random() * this.state.memes.length);\n        let randomMeme = this.state.memes[randomIndex];\n\n        this.setState({\n            meme: {\n                name: randomMeme.name,\n                img: randomMeme.url,\n                width: randomMeme.width,\n                height: randomMeme.height\n            }\n        });\n    }\n\n    save() {\n        domtoimage.toJpeg(document.getElementById(\"memeWrapper\"), {quality: 1.0})\n        .then(dataUrl => {\n            //Create a hyperlink\n            let link = document.createElement(\"a\");\n            //File name\n            link.download = this.state.meme.name;\n            //Destination\n            link.href = dataUrl;\n            link.click();\n        });\n    }\n\n    toggleVisibility(spinnerVisibility, memeVisibility) {\n        document.getElementById(\"spinner\").style.visibility = spinnerVisibility;\n        document.getElementById(\"memeWrapper\").style.visibility = memeVisibility;\n    }\n\n    handleClick(event) {\n        //To prevent page from automatic refreshing\n        event.preventDefault();\n        const {name} = event.target;\n\n        if(name === \"shuffleButton\") this.shuffle();\n        else if(name === \"saveButton\") this.save();\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleLoad(spinnerVisibility, memeVisibility) {\n        this.toggleVisibility(spinnerVisibility, memeVisibility);\n    }\n\n    render() {\n    \treturn(\n\t        <div>\n\t            <Header />\n\t            <Body \n\t            \tdata = {this.state.meme}\n\t            \ttopText = {this.state.topText}\n\t                bottomText = {this.state.bottomText}\n\t                handleChange = {this.handleChange}\n\t                handleClick = {this.handleClick}\n                \thandleLoad = {this.handleLoad}\n\t            />\n\t        </div>\n\t    );\n    }\n}\n\nexport default MemeGenerator;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MemeGenerator from \"./components/MemeGenerator\";\n\nReactDOM.render(<MemeGenerator />, document.getElementById(\"root\"));"],"sourceRoot":""}