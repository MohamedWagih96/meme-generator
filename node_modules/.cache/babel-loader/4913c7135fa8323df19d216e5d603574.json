{"ast":null,"code":"var _jsxFileName = \"/media/rogue/Rogue/Work/Projects/React/meme-generator/src/components/MemeGenerator.js\";\nimport React from \"react\";\nimport html2canvas from \"html2canvas\";\nimport Form from \"./Form\";\nimport Meme from \"./Meme\";\nimport \"./MemeGenerator.css\";\nimport domtoimage from 'dom-to-image';\nimport { saveAs } from 'file-saver';\n\nclass MemeGenerator extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"https://i.imgur.com/XTNyiVw.png\",\n      allMemeImgs: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(data => {\n      this.setState({\n        allMemeImgs: data.data.memes\n      });\n    }).catch(error => {\n      console.log(\"Error while retrieving data from the server\");\n    });\n  }\n\n  shuffle() {\n    let randomIndex = Math.floor(Math.random() * this.state.allMemeImgs.length);\n    this.setState({\n      randomImg: this.state.allMemeImgs[randomIndex].url\n    });\n  }\n\n  draw() {\n    let canvas = document.getElementById(\"memeCanvas\");\n    let context = canvas.getContext(\"2d\");\n    let img = new Image();\n\n    img.onload = () => {\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n      context.font = \"Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif\";\n      context.fillText(this.state.topText, canvas.width / 2, 10);\n    };\n\n    img.src = this.state.randomImg;\n  }\n\n  save() {\n    var node = document.getElementById('xyz');\n    domtoimage.toSvg(node).then(function (dataUrl) {\n      var img = new Image();\n      img.src = dataUrl;\n      document.body.appendChild(img);\n    }).catch(function (error) {\n      console.error('oops, something went wrong!', error);\n    });\n    domtoimage.toBlob(document.getElementById('xyz')).then(function (blob) {\n      window.saveAs(blob, 'my-node.png');\n    });\n  }\n\n  handleClick(event) {\n    //To prevent page refreshing\n    event.preventDefault();\n    const name = event.target.name;\n    if (name === \"shuffleButton\") this.shuffle();else if (name === \"saveButton\") this.save();\n  }\n\n  handleChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"memeGeneratorBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Form, {\n      topText: this.state.topText,\n      bottomText: this.state.bottomText,\n      handleChange: this.handleChange,\n      handleClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Meme, {\n      url: this.state.randomImg,\n      topText: this.state.topText,\n      bottomText: this.state.bottomText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"canvas\", {\n      id: \"memeCanvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/media/rogue/Rogue/Work/Projects/React/meme-generator/src/components/MemeGenerator.js"],"names":["React","html2canvas","Form","Meme","domtoimage","saveAs","MemeGenerator","Component","constructor","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleClick","componentDidMount","fetch","then","response","json","data","setState","memes","catch","error","console","log","shuffle","randomIndex","Math","floor","random","length","url","draw","canvas","document","getElementById","context","getContext","img","Image","onload","drawImage","width","height","font","fillText","src","save","node","toSvg","dataUrl","body","appendChild","toBlob","blob","window","event","preventDefault","name","target","value","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport html2canvas from \"html2canvas\";\nimport Form from \"./Form\";\nimport Meme from \"./Meme\";\nimport \"./MemeGenerator.css\";\n\nimport domtoimage from 'dom-to-image';\nimport { saveAs } from 'file-saver';\n\n\n\nclass MemeGenerator extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randomImg: \"https://i.imgur.com/XTNyiVw.png\",\n            allMemeImgs: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    componentDidMount() {\n        fetch(\"https://api.imgflip.com/get_memes\")\n        .then(response => response.json())\n        .then(data => {\n            this.setState({\n                allMemeImgs: data.data.memes\n            })\n        })\n        .catch(error => {\n            console.log(\"Error while retrieving data from the server\")\n        })\n    }\n\n    shuffle() {\n        let randomIndex = Math.floor(Math.random() * this.state.allMemeImgs.length);\n        this.setState({\n            randomImg: this.state.allMemeImgs[randomIndex].url\n        });\n    }\n\n    draw() {\n        let canvas = document.getElementById(\"memeCanvas\");\n        let context = canvas.getContext(\"2d\");\n        let img = new Image();\n        img.onload = () => {\n            context.drawImage(img, 0, 0, canvas.width, canvas.height);\n            context.font = \"Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif\";\n            context.fillText(this.state.topText, canvas.width/2, 10);\n        }\n        img.src = this.state.randomImg;\n    }\n\n    save() {\n        var node = document.getElementById('xyz');\n\n        domtoimage.toSvg(node)\n        .then(function (dataUrl) {\n            var img = new Image();\n            img.src = dataUrl;\n            document.body.appendChild(img);\n        })\n        .catch(function (error) {\n            console.error('oops, something went wrong!', error);\n        });\n\n        domtoimage.toBlob(document.getElementById('xyz'))\n        .then(function (blob) {\n        window.saveAs(blob, 'my-node.png');\n    });\n\n       \n    }\n\n    handleClick(event) {\n        //To prevent page refreshing\n        event.preventDefault();\n        const {name} = event.target;\n\n        if(name === \"shuffleButton\") this.shuffle();\n        else if(name === \"saveButton\") this.save();\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    render() {\n        return(\n            <div className = \"memeGeneratorBody\">\n                <Form \n                    topText = {this.state.topText}\n                    bottomText = {this.state.bottomText}\n                    handleChange = {this.handleChange}\n                    handleClick = {this.handleClick}\n                />\n                \n                <Meme \n                    url = {this.state.randomImg}\n                    topText = {this.state.topText}\n                    bottomText = {this.state.bottomText}\n                />         \n\n                <canvas id = \"memeCanvas\"></canvas>\n            </div>\n        );\n    }\n}\n\n\nexport default MemeGenerator;"]},"metadata":{},"sourceType":"module"}