{"ast":null,"code":"var _jsxFileName = \"/media/rogue/Rogue/Work/Projects/React/meme-generator/src/components/MemeGenerator.js\";\nimport React from \"react\";\nimport domtoimage from 'dom-to-image';\nimport Form from \"./Form\";\nimport Meme from \"./Meme\";\nimport \"./MemeGenerator.css\";\n\nclass MemeGenerator extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      meme: {\n        name: \"Joker and Mini Joker\",\n        img: \"https://i.imgur.com/XTNyiVw.png\",\n        width: 1200,\n        height: 600\n      },\n      memez: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(data => {\n      this.setState({\n        memez: data.data.memes\n      });\n    }).catch(error => {\n      console.log(\"Error while retrieving data from the server\");\n    });\n  }\n\n  shuffle() {\n    this.toggleVisibility(\"visible\", \"hidden\");\n    let randomIndex = Math.floor(Math.random() * this.state.memez.length);\n    let randomMeme = this.state.memez[randomIndex];\n    this.setState({\n      meme: {\n        name: randomMeme.name,\n        img: randomMeme.url,\n        width: randomMeme.width,\n        height: randomMeme.height\n      }\n    });\n  }\n\n  save() {\n    domtoimage.toJpeg(document.getElementById(\"memeWrapper\"), {\n      quality: 1.0\n    }).then(dataUrl => {\n      //Create a hyperlink\n      let link = document.createElement(\"a\"); //File name\n\n      link.download = this.state.meme.name; //Destination\n\n      link.href = dataUrl;\n      link.click();\n    });\n  }\n\n  toggleVisibility(spinnerVisibility, memeVisibility) {\n    document.getElementById(\"spinner\").style.visibility = spinnerVisibility;\n    document.getElementById(\"memeWrapper\").style.visibility = memeVisibility;\n  }\n\n  handleClick(event) {\n    //To prevent page from automatic refreshing\n    event.preventDefault();\n    const name = event.target.name;\n    if (name === \"shuffleButton\") this.shuffle();else if (name === \"saveButton\") this.save();\n  }\n\n  handleChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleLoad(spinnerVisibility, memeVisibility) {\n    this.toggleVisibility(spinnerVisibility, memeVisibility);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"memeGeneratorBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Form, {\n      topText: this.state.topText,\n      bottomText: this.state.bottomText,\n      handleChange: this.handleChange,\n      handleClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(Meme, {\n      data: this.state.meme,\n      topText: this.state.topText,\n      bottomText: this.state.bottomText,\n      handleLoad: this.onLoad,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/media/rogue/Rogue/Work/Projects/React/meme-generator/src/components/MemeGenerator.js"],"names":["React","domtoimage","Form","Meme","MemeGenerator","Component","constructor","state","topText","bottomText","meme","name","img","width","height","memez","handleChange","bind","handleClick","componentDidMount","fetch","then","response","json","data","setState","memes","catch","error","console","log","shuffle","toggleVisibility","randomIndex","Math","floor","random","length","randomMeme","url","save","toJpeg","document","getElementById","quality","dataUrl","link","createElement","download","href","click","spinnerVisibility","memeVisibility","style","visibility","event","preventDefault","target","value","handleLoad","render","onLoad"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport domtoimage from 'dom-to-image';\n\nimport Form from \"./Form\";\nimport Meme from \"./Meme\";\nimport \"./MemeGenerator.css\";\n\n\nclass MemeGenerator extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            meme: {\n                name: \"Joker and Mini Joker\",\n                img: \"https://i.imgur.com/XTNyiVw.png\",\n                width: 1200,\n                height: 600\n            },\n            memez: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);   \n    }\n\n    componentDidMount() {\n        fetch(\"https://api.imgflip.com/get_memes\")\n        .then(response => response.json())\n        .then(data => {\n            this.setState({\n                memez: data.data.memes\n            })\n        })\n        .catch(error => {\n            console.log(\"Error while retrieving data from the server\")\n        })\n    }\n\n    shuffle() {\n        this.toggleVisibility(\"visible\", \"hidden\");\n\n        let randomIndex = Math.floor(Math.random() * this.state.memez.length);\n        let randomMeme = this.state.memez[randomIndex];\n        this.setState({\n            meme: {\n                name: randomMeme.name,\n                img: randomMeme.url,\n                width: randomMeme.width,\n                height: randomMeme.height\n            }\n        });\n    }\n\n    save() {\n        domtoimage.toJpeg(document.getElementById(\"memeWrapper\"), {quality: 1.0})\n        .then(dataUrl => {\n            //Create a hyperlink\n            let link = document.createElement(\"a\");\n            //File name\n            link.download = this.state.meme.name;\n            //Destination\n            link.href = dataUrl;\n            link.click();\n        });\n    }\n\n    toggleVisibility(spinnerVisibility, memeVisibility) {\n        document.getElementById(\"spinner\").style.visibility = spinnerVisibility;\n        document.getElementById(\"memeWrapper\").style.visibility = memeVisibility;\n    }\n\n    handleClick(event) {\n        //To prevent page from automatic refreshing\n        event.preventDefault();\n        const {name} = event.target;\n\n        if(name === \"shuffleButton\") this.shuffle();\n        else if(name === \"saveButton\") this.save();\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleLoad(spinnerVisibility, memeVisibility) {\n        this.toggleVisibility(spinnerVisibility, memeVisibility);\n    }\n\n    render() {\n        return(\n            <div className = \"memeGeneratorBody\">\n                <Form\n                    topText = {this.state.topText}\n                    bottomText = {this.state.bottomText}\n                    handleChange = {this.handleChange}\n                    handleClick = {this.handleClick}\n                />\n                \n                <Meme \n                    data = {this.state.meme}\n                    topText = {this.state.topText}\n                    bottomText = {this.state.bottomText}\n                    handleLoad = {this.onLoad}\n                />  \n\n                <div id = \"spinner\"></div>       \n            </div>\n        );\n    }\n}\n\n\nexport default MemeGenerator;"]},"metadata":{},"sourceType":"module"}