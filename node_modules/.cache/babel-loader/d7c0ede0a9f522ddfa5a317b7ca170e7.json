{"ast":null,"code":"var _jsxFileName = \"/media/rogue/Rogue/Work/Projects/React/meme-generator/src/components/MemeGenerator.js\";\nimport React from \"react\";\nimport domtoimage from 'dom-to-image';\nimport Form from \"./Form\";\nimport Meme from \"./Meme\";\nimport \"./MemeGenerator.css\";\n\nclass MemeGenerator extends React.Component {\n  constructor() {\n    super();\n    this.badMemes = [\"61539\", \"28251713\", \"164335977\", \"112126428\", \"93895088\", \"71428573\", \"123999232\", \"178591752\", \"21735\", \"53764\", \"99683372\", \"28034788\", \"14230520\", \"129242436\", \"101910402\", \"124822590\", \"47235368\", \"161865971\", \"56225174\", \"131087935\", \"21604248\", \"21735\", \"101288\", \"155067746\", \"134797956\", \"155518747\", \"170715647\", \"181913649\", \"87743020\", \"438680\", \"188390779\", \"6235864\", \"157978092\", \"1035805\", \"196652226\"];\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleLoad = this.handleLoad.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(data => {\n      const filteredMemes = this.filterMemes(data.data.memes);\n      this.setState({\n        memes: filteredMemes\n      });\n    }).catch(error => {\n      console.log(\"Error while retrieving data from the server\");\n    });\n  }\n\n  filterMemes(memes) {\n    return memes.filter(meme => !this.badMemes.includes(meme.id)).map(meme => meme);\n  }\n\n  shuffle() {\n    this.toggleVisibility(\"visible\", \"hidden\");\n    let randomIndex = Math.floor(Math.random() * this.state.memes.length);\n    let randomMeme = this.state.memes[randomIndex];\n    this.setState({\n      meme: {\n        name: randomMeme.name,\n        img: randomMeme.url,\n        width: randomMeme.width,\n        height: randomMeme.height\n      }\n    });\n  }\n\n  save() {\n    domtoimage.toJpeg(document.getElementById(\"memeWrapper\"), {\n      quality: 1.0\n    }).then(dataUrl => {\n      //Create a hyperlink\n      let link = document.createElement(\"a\"); //File name\n\n      link.download = this.state.meme.name; //Destination\n\n      link.href = dataUrl;\n      link.click();\n    });\n  }\n\n  toggleVisibility(spinnerVisibility, memeVisibility) {\n    document.getElementById(\"spinner\").style.visibility = spinnerVisibility;\n    document.getElementById(\"memeWrapper\").style.visibility = memeVisibility;\n  }\n\n  handleClick(event) {\n    //To prevent page from automatic refreshing\n    event.preventDefault();\n    const name = event.target.name;\n    if (name === \"shuffleButton\") this.shuffle();else if (name === \"saveButton\") this.save();\n  }\n\n  handleChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleLoad(spinnerVisibility, memeVisibility) {\n    this.toggleVisibility(spinnerVisibility, memeVisibility);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"memeGeneratorBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Form, {\n      topText: this.state.topText,\n      bottomText: this.state.bottomText,\n      handleChange: this.handleChange,\n      handleClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(Meme, {\n      data: this.state.meme,\n      topText: this.state.topText,\n      bottomText: this.state.bottomText,\n      handleLoad: this.handleLoad,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/media/rogue/Rogue/Work/Projects/React/meme-generator/src/components/MemeGenerator.js"],"names":["React","domtoimage","Form","Meme","MemeGenerator","Component","constructor","badMemes","handleChange","bind","handleClick","handleLoad","componentDidMount","fetch","then","response","json","data","filteredMemes","filterMemes","memes","setState","catch","error","console","log","filter","meme","includes","id","map","shuffle","toggleVisibility","randomIndex","Math","floor","random","state","length","randomMeme","name","img","url","width","height","save","toJpeg","document","getElementById","quality","dataUrl","link","createElement","download","href","click","spinnerVisibility","memeVisibility","style","visibility","event","preventDefault","target","value","render","topText","bottomText"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport domtoimage from 'dom-to-image';\n\nimport Form from \"./Form\";\nimport Meme from \"./Meme\";\nimport \"./MemeGenerator.css\";\n\n\nclass MemeGenerator extends React.Component {\n    constructor() {\n        super();\n\n        \n\n        this.badMemes = [\n            \"61539\", \"28251713\", \"164335977\", \"112126428\", \"93895088\", \"71428573\", \"123999232\",\n            \"178591752\", \"21735\", \"53764\", \"99683372\", \"28034788\", \"14230520\", \"129242436\",\n            \"101910402\", \"124822590\", \"47235368\", \"161865971\", \"56225174\", \"131087935\", \n            \"21604248\", \"21735\", \"101288\", \"155067746\", \"134797956\", \"155518747\", \"170715647\",\n            \"181913649\", \"87743020\", \"438680\", \"188390779\", \"6235864\", \"157978092\", \"1035805\",\n            \"196652226\", \n        ];\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);  \n        this.handleLoad = this.handleLoad.bind(this); \n    }\n\n    componentDidMount() {\n        fetch(\"https://api.imgflip.com/get_memes\")\n        .then(response => response.json())\n        .then(data => {\n            const filteredMemes = this.filterMemes(data.data.memes);\n\n            this.setState({\n                memes: filteredMemes\n            });\n        })\n        .catch(error => {\n            console.log(\"Error while retrieving data from the server\")\n        })\n    }\n\n    filterMemes(memes) {\n        return memes.filter(meme => !(this.badMemes.includes(meme.id)))\n                    .map(meme => meme);\n    }\n\n    shuffle() {\n        this.toggleVisibility(\"visible\", \"hidden\");\n\n        let randomIndex = Math.floor(Math.random() * this.state.memes.length);\n        let randomMeme = this.state.memes[randomIndex];\n\n        this.setState({\n            meme: {\n                name: randomMeme.name,\n                img: randomMeme.url,\n                width: randomMeme.width,\n                height: randomMeme.height\n            }\n        });\n    }\n\n    save() {\n        domtoimage.toJpeg(document.getElementById(\"memeWrapper\"), {quality: 1.0})\n        .then(dataUrl => {\n            //Create a hyperlink\n            let link = document.createElement(\"a\");\n            //File name\n            link.download = this.state.meme.name;\n            //Destination\n            link.href = dataUrl;\n            link.click();\n        });\n    }\n\n    toggleVisibility(spinnerVisibility, memeVisibility) {\n        document.getElementById(\"spinner\").style.visibility = spinnerVisibility;\n        document.getElementById(\"memeWrapper\").style.visibility = memeVisibility;\n    }\n\n    handleClick(event) {\n        //To prevent page from automatic refreshing\n        event.preventDefault();\n        const {name} = event.target;\n\n        if(name === \"shuffleButton\") this.shuffle();\n        else if(name === \"saveButton\") this.save();\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleLoad(spinnerVisibility, memeVisibility) {\n        this.toggleVisibility(spinnerVisibility, memeVisibility);\n    }\n\n    render() {\n        return(\n            <div className = \"memeGeneratorBody\">\n                <Form\n                    topText = {this.state.topText}\n                    bottomText = {this.state.bottomText}\n                    handleChange = {this.handleChange}\n                    handleClick = {this.handleClick}\n                />\n                \n                <Meme \n                    data = {this.state.meme}\n                    topText = {this.state.topText}\n                    bottomText = {this.state.bottomText}\n                    handleLoad = {this.handleLoad}\n                />  \n\n                <div id = \"spinner\"></div>       \n            </div>\n        );\n    }\n}\n\n\nexport default MemeGenerator;"]},"metadata":{},"sourceType":"module"}