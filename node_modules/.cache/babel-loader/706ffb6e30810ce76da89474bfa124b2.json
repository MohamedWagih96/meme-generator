{"ast":null,"code":"var _jsxFileName = \"/media/rogue/Rogue/Work/Projects/React/meme-generator/src/components/MemeGenerator.js\";\nimport React from \"react\";\nimport html2canvas from \"html2canvas\";\nimport Form from \"./Form\";\nimport Meme from \"./Meme\";\nimport \"./MemeGenerator.css\";\n\nclass MemeGenerator extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"https://i.imgur.com/XTNyiVw.png\",\n      allMemeImgs: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(data => {\n      this.setState({\n        allMemeImgs: data.data.memes\n      });\n    }).catch(error => {\n      console.log(\"Error while retrieving data from the server\");\n    });\n  }\n\n  shuffle() {\n    let randomIndex = Math.floor(Math.random() * this.state.allMemeImgs.length);\n    this.setState({\n      randomImg: this.state.allMemeImgs[randomIndex].url\n    });\n  }\n\n  save() {\n    html2canvas(document.getElementById(\"zz\")).then(canvas => {\n      canvas.className = \"html2canvas\";\n      document.getElementById(\"canvasWrapper\").appendChild(canvas);\n      var image = canvas.toDataURL(\"image/png\");\n      document.getElementById(\"downloadLink\").href = image;\n    });\n  }\n\n  handleClick(event) {\n    //To prevent page refreshing\n    event.preventDefault();\n    const name = event.target.name;\n    if (name === \"shuffleButton\") this.shuffle();else if (name === \"saveButton\") this.save();\n  }\n\n  handleChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"memeGeneratorBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Form, {\n      topText: this.state.topText,\n      bottomText: this.state.bottomText,\n      handleChange: this.handleChange,\n      handleClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Meme, {\n      url: this.state.randomImg,\n      topText: this.state.topText,\n      bottomText: this.state.bottomText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"canvasWrapper\",\n      class: \"outer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Canvas-rendered (try right-click, save image as!)\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Or, \", React.createElement(\"a\", {\n      id: \"downloadLink\",\n      download: \"cat.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Click Here to Download!\"))));\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/media/rogue/Rogue/Work/Projects/React/meme-generator/src/components/MemeGenerator.js"],"names":["React","html2canvas","Form","Meme","MemeGenerator","Component","constructor","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleClick","componentDidMount","fetch","then","response","json","data","setState","memes","catch","error","console","log","shuffle","randomIndex","Math","floor","random","length","url","save","document","getElementById","canvas","className","appendChild","image","toDataURL","href","event","preventDefault","name","target","value","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport html2canvas from \"html2canvas\";\nimport Form from \"./Form\";\nimport Meme from \"./Meme\";\nimport \"./MemeGenerator.css\";\n\n\n\nclass MemeGenerator extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randomImg: \"https://i.imgur.com/XTNyiVw.png\",\n            allMemeImgs: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    componentDidMount() {\n        fetch(\"https://api.imgflip.com/get_memes\")\n        .then(response => response.json())\n        .then(data => {\n            this.setState({\n                allMemeImgs: data.data.memes\n            })\n        })\n        .catch(error => {\n            console.log(\"Error while retrieving data from the server\")\n        })\n    }\n\n    shuffle() {\n        let randomIndex = Math.floor(Math.random() * this.state.allMemeImgs.length);\n        this.setState({\n            randomImg: this.state.allMemeImgs[randomIndex].url\n        });\n    }\n\n    save() {\n        html2canvas(document.getElementById(\"zz\")).then(canvas => {\n            canvas.className = \"html2canvas\";\n            document.getElementById(\"canvasWrapper\").appendChild(canvas);\n            var image = canvas.toDataURL(\"image/png\");\n            document.getElementById(\"downloadLink\").href = image;\n        });\n    }\n\n    handleClick(event) {\n        //To prevent page refreshing\n        event.preventDefault();\n        const {name} = event.target;\n\n        if(name === \"shuffleButton\") this.shuffle();\n        else if(name === \"saveButton\") this.save();\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    render() {\n        return(\n            <div className = \"memeGeneratorBody\">\n                <Form \n                    topText = {this.state.topText}\n                    bottomText = {this.state.bottomText}\n                    handleChange = {this.handleChange}\n                    handleClick = {this.handleClick}\n                />\n                \n                <Meme \n                    url = {this.state.randomImg}\n                    topText = {this.state.topText}\n                    bottomText = {this.state.bottomText}\n                />         \n\n                <div id=\"canvasWrapper\" class=\"outer\">\n                <p>Canvas-rendered (try right-click, save image as!)</p>\n                <p>Or, <a id=\"downloadLink\" download=\"cat.png\">Click Here to Download!</a></p>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default MemeGenerator;"]},"metadata":{},"sourceType":"module"}