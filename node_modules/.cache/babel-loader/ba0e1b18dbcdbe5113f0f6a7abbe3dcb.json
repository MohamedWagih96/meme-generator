{"ast":null,"code":"var _jsxFileName = \"/media/rogue/Rogue/Work/Projects/React/meme-generator/src/components/MemeGenerator.js\";\nimport React from \"react\";\nimport Form from \"./Form\";\nimport Meme from \"./Meme\";\nimport \"./MemeGenerator.css\";\n\nclass MemeGenerator extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"https://i.imgur.com/XTNyiVw.png\",\n      allMemeImgs: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(data => {\n      this.setState({\n        allMemeImgs: data.data.memes\n      });\n    }).catch(error => {\n      console.log(\"Error while retrieving data from the server\");\n    });\n  }\n\n  shuffle() {\n    console.log(this.state.allMemeImgs);\n    return this.state.allMemeImgs[Math.floor(Math.random() * allMemeImgs.length)];\n  }\n\n  handleClick() {\n    this.setState(prevMeme => {\n      let nextMeme;\n\n      while (true) {\n        nextMeme = this.shuffle();\n        if (prevMeme !== nextMeme) return nextMeme;\n      }\n    });\n  }\n\n  handleChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"memeGeneratorBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Form, {\n      topText: this.state.topText,\n      bottomText: this.state.bottomText,\n      onClick: this.handleClick,\n      handleChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(Meme, {\n      url: this.state.randomImg,\n      topText: this.state.topText,\n      bottomText: this.state.bottomText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MemeGenerator;","map":{"version":3,"sources":["/media/rogue/Rogue/Work/Projects/React/meme-generator/src/components/MemeGenerator.js"],"names":["React","Form","Meme","MemeGenerator","Component","constructor","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleClick","componentDidMount","fetch","then","response","json","data","setState","memes","catch","error","console","log","shuffle","Math","floor","random","length","prevMeme","nextMeme","event","target","name","value","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,qBAAP;;AAGA,MAAMC,aAAN,SAA4BH,KAAK,CAACI,SAAlC,CAA4C;AACxCC,EAAAA,WAAW,GAAG;AACV;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,EADA;AAETC,MAAAA,UAAU,EAAE,EAFH;AAGTC,MAAAA,SAAS,EAAE,iCAHF;AAITC,MAAAA,WAAW,EAAE;AAJJ,KAAb;AAOA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AAEDE,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAAC,mCAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAI;AACV,WAAKC,QAAL,CAAc;AACVV,QAAAA,WAAW,EAAES,IAAI,CAACA,IAAL,CAAUE;AADb,OAAd;AAGH,KAND,EAOCC,KAPD,CAOOC,KAAK,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACH,KATD;AAUH;;AAEDC,EAAAA,OAAO,GAAG;AACNF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKnB,KAAL,CAAWI,WAAvB;AACA,WAAO,KAAKJ,KAAL,CAAWI,WAAX,CAAuBiB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBnB,WAAW,CAACoB,MAAvC,CAAvB,CAAP;AACH;;AAEDjB,EAAAA,WAAW,GAAG;AACV,SAAKO,QAAL,CAAcW,QAAQ,IAAI;AACtB,UAAIC,QAAJ;;AACA,aAAO,IAAP,EAAa;AACTA,QAAAA,QAAQ,GAAG,KAAKN,OAAL,EAAX;AAEA,YAAGK,QAAQ,KAAKC,QAAhB,EAA0B,OAAOA,QAAP;AAC7B;AACJ,KAPD;AAQH;;AAEDrB,EAAAA,YAAY,CAACsB,KAAD,EAAQ;AAAA,0BACMA,KAAK,CAACC,MADZ;AAAA,UACTC,IADS,iBACTA,IADS;AAAA,UACHC,KADG,iBACHA,KADG;AAGhB,SAAKhB,QAAL,CAAc;AACV,OAACe,IAAD,GAAQC;AADE,KAAd;AAGH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAG,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AACI,MAAA,OAAO,EAAI,KAAK/B,KAAL,CAAWC,OAD1B;AAEI,MAAA,UAAU,EAAI,KAAKD,KAAL,CAAWE,UAF7B;AAGI,MAAA,OAAO,EAAI,KAAKK,WAHpB;AAII,MAAA,YAAY,EAAI,KAAKF,YAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAQI,oBAAC,IAAD;AACI,MAAA,GAAG,EAAI,KAAKL,KAAL,CAAWG,SADtB;AAEI,MAAA,OAAO,EAAI,KAAKH,KAAL,CAAWC,OAF1B;AAGI,MAAA,UAAU,EAAI,KAAKD,KAAL,CAAWE,UAH7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,CADJ;AAgBH;;AArEuC;;AAyE5C,eAAeL,aAAf","sourcesContent":["import React from \"react\";\nimport Form from \"./Form\";\nimport Meme from \"./Meme\";\nimport \"./MemeGenerator.css\";\n\n\nclass MemeGenerator extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randomImg: \"https://i.imgur.com/XTNyiVw.png\",\n            allMemeImgs: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    componentDidMount() {\n        fetch(\"https://api.imgflip.com/get_memes\")\n        .then(response => response.json())\n        .then(data => {\n            this.setState({\n                allMemeImgs: data.data.memes\n            })\n        })\n        .catch(error => {\n            console.log(\"Error while retrieving data from the server\")\n        })\n    }\n\n    shuffle() {\n        console.log(this.state.allMemeImgs)\n        return this.state.allMemeImgs[Math.floor(Math.random() * allMemeImgs.length)];\n    }\n\n    handleClick() {\n        this.setState(prevMeme => {\n            let nextMeme;\n            while (true) {\n                nextMeme = this.shuffle();\n\n                if(prevMeme !== nextMeme) return nextMeme;\n            }\n        })\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    render() {\n        return(\n            <div className = \"memeGeneratorBody\">\n                <Form \n                    topText = {this.state.topText}\n                    bottomText = {this.state.bottomText}\n                    onClick = {this.handleClick}\n                    handleChange = {this.handleChange}\n                />\n\n                <Meme \n                    url = {this.state.randomImg}\n                    topText = {this.state.topText}\n                    bottomText = {this.state.bottomText}\n                /> \n            </div>\n        );\n    }\n}\n\n\nexport default MemeGenerator;"]},"metadata":{},"sourceType":"module"}